.. _dpy:

===============
Python fixtures
===============

The :mod:`north.dpy` module defines 

- a Django *data serializer* that dumps data into a Python fixture
- a *deserializer* that loads Python fixtures into the database

A Python fixture is a normal Python module which defines 
a function `objects` 
which should return or yield the list of model instances 
to be added. Fictive minimal Example::

  from myapp.models import Foo
  def objects():
      yield Foo(name="First")
      yield Foo(name="Second")
      
There are two big use cases for Python fixtures: 

(1) "intelligent" fixtures to create reusable sets of data 
    to be used by unit tests, application prototypes and 
    demonstrative examples.
    
(2) "dumped" fixtures are used for backup and data migration.

    dump ("serialize") the content of a database to a python script
    which can be loaded ("deserialized") to reproduce an exact duplicate 
    of the original database.
  
    read the dump from a previous version, performing database 
    conversions (migration).

Note that to load Python fixtures you also need an :xfile:`__init__.py` 
file (which can be empty) in each fixture directory that has `.py` 
fixtures.


See also

- :doc:`/tutorials/polls/mysite/index`
- http://code.djangoproject.com/ticket/10664
 
Note about `django-extensions <https://github.com/django-extensions>`_ 
----------------------------------------------------------------------

`django-extensions <https://github.com/django-extensions>`_ 
has a command "dumpscript" which is comparable.
Differences: 

- dumpy produces fixtures to be restored with loaddata,
  dumpscript produces a simple python script to be restored with runscript
- the fixtures generated by dumpy are designed in order to make it possible to 
  write automated data migrations.
  
  
Models that get special handling in :mod:`lino.utils.dumpy`:
------------------------------------------------------------

- `ContentType` objects aren't stored in a dump because they 
  can always be recreated.
- `Site` and `Permission` objects *must* be stored and *must not* be re-created
- `Session` objects can get lost in a dump and are not stored.


External links
---------------

- limodou published a Djangosnippet in 2007 which does something similar:
  `db_dump.py - for dumpping and loading data from database
  <http://djangosnippets.org/snippets/14/>`_
  (TODO: compare them)
  