"""
``north`` -- another way to migrate Django databases.

A Python code serializer/deserializer for Django 
which lets you write intelligent fixtures and generate database dumps. 
Includes an optional single-table solution for handling multilingual database content. 
Last but not least you can use it to provide automated database migrations
using a completely different approach than `South <http://south.aeracode.org/>`__

It doesn't provide any Model, it is not even a Django app.
Basic usage in your :xfile:`settings.py` file is similar 
to that of `django-site <http://site.lino-framework.org>`__::

      from north import Site
      SITE = Site(__file__,globals())
      INSTALLED_APPS = [... "django_site"]

It works by adding a new serialization format "py" 
which you can specify 
using the `--format` option of Django's `dump` command::

  manage.py dump --format py

Instantiating a :class:`north.Site <Site>` 
will set Django's :setting:`SERIALIZATION_MODULES` setting to::

  SERIALIZATION_MODULES = { "py" : "north.dpy" }
  
If you happen to define your own local serialization modules,
don't forget to also include the :mod:`north.dpy` module.


"""

import os

execfile(os.path.join(os.path.dirname(__file__),'version.py'))

__author__ = "Luc Saffre <luc.saffre@gmx.net>"

#~ __url__ = "http://lino.saffre-rumma.net"
#~ __url__ = "http://code.google.com/p/lino/"
__url__ = "http://north.lino-framework.org"


__copyright__ = """\
Copyright (c) 2002-2013 Luc Saffre.
This software comes with ABSOLUTELY NO WARRANTY and is
distributed under the terms of the GNU General Public License.
See file COPYING.txt for more information."""


from django_site import Site

gettext = lambda s: s

# todo: remove this
def language_choices(*args):
    """
    A subset of Django's LANGUAGES.
    See :doc:`/blog/2011/0226`.
    """
    _langs = dict(
        en=gettext('English'),
        de=gettext('German'),
        fr=gettext('French'),
        nl=gettext('Dutch'),
        et=gettext('Estonian'),
    )
    return [(x,_langs[x]) for x in args]
      



class Site(Site):
    """
    Extends the standard :class:`django_site.Site`.
    adding some attributes and methods used by `north`.
    """
    
    languages = None
    
    #~ languages = ['en']
    
    """
    The language distribution used in this database.
    
    This must be either `None` or an iterable of 2-letter codes.
    Examples::
    
      languages = "en de fr nl et".split()
      languages = ['en']
      
    The first language in this list will be the site's 
    default language.
    
    Changing this setting might affect your database structure 
    and thus require a data migration
    if your application uses babel fields.    
    
    ? Lino will use this setting to set the Django 
    ? settings :setting:`LANGUAGES` and  :setting:`LANGUAGE_CODE`.
    
    """
    
    migration_module = None
    """
    If you maintain a data migration module for your application, 
    specify its name here.
    """
    
    loading_from_dump = False
    """
    Set to `False` by python dumps that were generated by
    :meth:`lino.utils.dumpy.Serializer.serialize`.
    Used in 
    :func:`lino.modlib.cal.models.update_auto_task`
    and
    :mod:`lino.modlib.mails.models`.
    See also :doc:`/blog/2011/0901`.
    """
    
    def __init__(self,project_file,django_settings):
        super(Site,self).__init__(project_file,django_settings)
        django_settings.update(SERIALIZATION_MODULES = {
            "py" : "north.dpy",
        })
        
        if self.languages is not None:
            lc = language_choices(*self.languages)
            django_settings.update(LANGUAGES = lc)
            django_settings.update(LANGUAGE_CODE = lc[0][0])
        
        
        
    def install_migrations(self,*args):
        """
        See :func:`lino.utils.dumpy.install_migrations`.
        """
        from .dpy import install_migrations
        install_migrations(self,*args)
        
          
    def using(self,ui=None):
        for u in super(Site,self).using(ui): yield u
          
        yield ("django-north",__version__,"http://north.lino-framework.org")
        
